import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Set random seed for reproducibility
np.random.seed(42)

# In this example, instead of using time intervals with varying noise,
# we'll create groups with different variances directly

# Parameters
true_x = 10
n_per_group = 20  # Equal sample size for each group

# Create data for 3 groups with different variances
# Here, we manually specify the β values and variances
group_params = [
    {"group": "A", "beta": 0.8, "variance": 0.1},  # Low variance, medium β
    {"group": "B", "beta": 0.9, "variance": 1.0},  # Medium variance, high β
    {"group": "C", "beta": 0.7, "variance": 4.0}   # High variance, low β
]

# Generate data
data = []
for params in group_params:
    group = params["group"]
    beta = params["beta"]
    std_dev = np.sqrt(params["variance"])
    
    # Generate xi values that would give us the desired beta when regressed
    # If true_x = β * xi + noise, then xi = (true_x - noise) / β
    noise = np.random.normal(0, std_dev, n_per_group)
    xi_values = (true_x - noise) / beta
    
    for xi in xi_values:
        data.append({
            'group': group,
            'xi': xi,
            'beta': beta,
            'variance': params["variance"]
        })

# Convert to DataFrame
df = pd.DataFrame(data)

# Calculate individual regression coefficients
individual_betas = {}
for group in df['group'].unique():
    subset = df[df['group'] == group]
    X = subset[['xi']].values
    y = np.ones(len(subset)) * true_x  # True value is constant
    
    model = LinearRegression(fit_intercept=False)
    model.fit(X, y)
    individual_betas[group] = model.coef_[0]

# Calculate average beta
beta_bar = np.mean(list(individual_betas.values()))

# Calculate pooled beta
X_pooled = df[['xi']].values
y_pooled = np.ones(len(df)) * true_x
model_pooled = LinearRegression(fit_intercept=False)
model_pooled.fit(X_pooled, y_pooled)
pooled_beta = model_pooled.coef_[0]

# Print results
print(f"True x: {true_x}")
print("\nIndividual regression coefficients (β_i):")
for group, beta in individual_betas.items():
    variance = df[df['group'] == group]['variance'].iloc[0]
    print(f"Group {group} (variance={variance:.1f}): β = {beta:.6f}")
print(f"\nMinimum β_i: {min(individual_betas.values()):.6f}")
print(f"Average of individual βs (β_bar): {beta_bar:.6f}")
print(f"Pooled regression coefficient (β): {pooled_beta:.6f}")

# Demonstrate why this happens by calculating the weighted average
print("\nWeighted Average Calculation:")
# Calculate weights (proportional to 1/variance)
group_variances = {group: df[df['group'] == group]['variance'].iloc[0] for group in df['group'].unique()}
weights = [1/group_variances[group] for group in df['group'].unique()]
total_weight = sum(weights)
normalized_weights = [w/total_weight for w in weights]

print("Weights based on 1/variance:")
for group, w in zip(df['group'].unique(), normalized_weights):
    variance = group_variances[group]
    print(f"Group {group} (variance={variance:.1f}): weight = {w:.4f}")

weighted_beta = sum(individual_betas[group] * w for group, w in zip(df['group'].unique(), normalized_weights))
print(f"\nWeighted average of βs: {weighted_beta:.6f}")
print(f"Pooled regression β: {pooled_beta:.6f}")

# Visualize the data
plt.figure(figsize=(10, 6))
colors = ['blue', 'green', 'red']
groups = df['group'].unique()

for i, group in enumerate(groups):
    subset = df[df['group'] == group]
    variance = subset['variance'].iloc[0]
    plt.scatter(subset['xi'], [true_x] * len(subset), alpha=0.6, 
                color=colors[i], label=f'Group {group} (var={variance:.1f})')

# Plot regression lines
x_range = np.linspace(df['xi'].min(), df['xi'].max(), 100)
for i, group in enumerate(groups):
    plt.plot(x_range, individual_betas[group] * x_range, '--', 
             color=colors[i], alpha=0.7, label=f'β_{group} = {individual_betas[group]:.4f}')

# Plot pooled regression line
plt.plot(x_range, pooled_beta * x_range, 'k-', linewidth=2, 
         label=f'Pooled β = {pooled_beta:.4f}')

plt.axhline(y=true_x, color='gray', linestyle='-', alpha=0.3)
plt.axvline(x=true_x, color='gray', linestyle='-', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.xlabel('Observed values (xi)')
plt.ylabel('True value (x)')
plt.title('Regression Lines: Individual vs. Pooled')
plt.legend()
plt.tight_layout()
